export class HTMLGenerator {
  constructor() {
    this.template = '';
  }

  generateReport(analysisData, fileName = 'chat_analysis_report.html') {
    const html = this.buildHTML(analysisData);
    return new Blob([html], { type: 'text/html' });
  }

  buildHTML(data) {
    const title = 'WhatsApp Chat Analysis Report';
    const generatedDate = new Date().toLocaleDateString();
    
    return `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${title}</title>
    <style>
        ${this.getStyles()}
    </style>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
    <div class="container">
        <header class="header">
            <h1>${title}</h1>
            <p class="subtitle">Generated on ${generatedDate}</p>
        </header>

        <main class="main">
            ${this.buildSummarySection(data)}
            ${this.buildParticipantSection(data)}
            ${this.buildSentimentSection(data)}
            ${this.buildTopicSection(data)}
            ${this.buildInsightsSection(data)}
            ${this.buildMetadataSection(data)}
        </main>

        <footer class="footer">
            <p>Report generated by WhatsApp Chat Analyzer</p>
            <p>Generated on ${new Date().toISOString()}</p>
        </footer>
    </div>

    <script>
        ${this.getScripts(data)}
    </script>
</body>
</html>`;
  }

  buildSummarySection(data) {
    const summary = data.summary || {};
    const statistics = data.statistics || {};
    
    return `
        <section class="section">
            <h2>Executive Summary</h2>
            <div class="summary-grid">
                <div class="stat-card">
                    <h3>Total Messages</h3>
                    <p class="stat-value">${statistics.totalMessages || 0}</p>
                </div>
                <div class="stat-card">
                    <h3>Participants</h3>
                    <p class="stat-value">${summary.participantCount || 0}</p>
                </div>
                <div class="stat-card">
                    <h3>Total Words</h3>
                    <p class="stat-value">${statistics.totalWords || 0}</p>
                </div>
                <div class="stat-card">
                    <h3>Media Messages</h3>
                    <p class="stat-value">${statistics.mediaMessages || 0}</p>
                </div>
            </div>
            <div class="summary-text">
                <p>This analysis covers ${statistics.totalMessages || 0} messages from ${summary.participantCount || 0} participants, spanning from ${summary.timeRange ? new Date(summary.timeRange.start).toLocaleDateString() : 'N/A'} to ${summary.timeRange ? new Date(summary.timeRange.end).toLocaleDateString() : 'N/A'}.</p>
            </div>
        </section>`;
  }

  buildParticipantSection(data) {
    const participants = data.participants || {};
    const participantEntries = Object.entries(participants)
      .sort((a, b) => b[1].messageCount - a[1].messageCount)
      .slice(0, 10);

    if (participantEntries.length === 0) {
      return `
        <section class="section">
            <h2>Participant Analysis</h2>
            <p>No participant data available.</p>
        </section>`;
    }

    const participantRows = participantEntries.map(([name, participantData]) => `
        <tr>
            <td class="participant-name">${name}</td>
            <td>${participantData.messageCount}</td>
            <td>${participantData.wordCount}</td>
            <td>${participantData.avgMessageLength}</td>
            <td><span class="sentiment-badge sentiment-${participantData.sentiment}">${participantData.sentiment || 'neutral'}</span></td>
            <td><span class="engagement-badge engagement-${participantData.engagementLevel}">${participantData.engagementLevel || 'medium'}</span></td>
        </tr>
    `).join('');

    return `
        <section class="section">
            <h2>Participant Analysis</h2>
            <div class="table-container">
                <table class="participants-table">
                    <thead>
                        <tr>
                            <th>Participant</th>
                            <th>Messages</th>
                            <th>Words</th>
                            <th>Avg Length</th>
                            <th>Sentiment</th>
                            <th>Engagement</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${participantRows}
                    </tbody>
                </table>
            </div>
        </section>`;
  }

  buildSentimentSection(data) {
    const sentiment = data.sentiment || {};
    
    return `
        <section class="section">
            <h2>Sentiment Analysis</h2>
            <div class="sentiment-container">
                <div class="sentiment-overview">
                    <div class="sentiment-main">
                        <h3>Overall Sentiment</h3>
                        <p class="sentiment-value sentiment-${sentiment.overall}">${sentiment.overall || 'neutral'}</p>
                        <p class="sentiment-score">${Math.round((sentiment.score || 0.5) * 100)}% confidence</p>
                    </div>
                    <div class="sentiment-distribution">
                        <h3>Distribution</h3>
                        <div class="sentiment-bars">
                            <div class="sentiment-bar">
                                <span class="sentiment-label">Positive</span>
                                <div class="sentiment-bar-container">
                                    <div class="sentiment-bar-fill sentiment-positive" style="width: ${sentiment.distribution ? (sentiment.distribution.positive / (sentiment.distribution.positive + sentiment.distribution.neutral + sentiment.distribution.negative)) * 100 : 0}%"></div>
                                </div>
                                <span class="sentiment-count">${sentiment.distribution ? sentiment.distribution.positive : 0}</span>
                            </div>
                            <div class="sentiment-bar">
                                <span class="sentiment-label">Neutral</span>
                                <div class="sentiment-bar-container">
                                    <div class="sentiment-bar-fill sentiment-neutral" style="width: ${sentiment.distribution ? (sentiment.distribution.neutral / (sentiment.distribution.positive + sentiment.distribution.neutral + sentiment.distribution.negative)) * 100 : 0}%"></div>
                                </div>
                                <span class="sentiment-count">${sentiment.distribution ? sentiment.distribution.neutral : 0}</span>
                            </div>
                            <div class="sentiment-bar">
                                <span class="sentiment-label">Negative</span>
                                <div class="sentiment-bar-container">
                                    <div class="sentiment-bar-fill sentiment-negative" style="width: ${sentiment.distribution ? (sentiment.distribution.negative / (sentiment.distribution.positive + sentiment.distribution.neutral + sentiment.distribution.negative)) * 100 : 0}%"></div>
                                </div>
                                <span class="sentiment-count">${sentiment.distribution ? sentiment.distribution.negative : 0}</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </section>`;
  }

  buildTopicSection(data) {
    const topics = data.topics || [];
    
    if (topics.length === 0) {
      return `
        <section class="section">
            <h2>Topic Analysis</h2>
            <p>No topics identified in the conversation.</p>
        </section>`;
    }

    const topicCards = topics.slice(0, 10).map(topic => `
        <div class="topic-card">
            <h4>${topic.name}</h4>
            <p class="topic-frequency">${topic.frequency} mentions</p>
            <p class="topic-sentiment sentiment-${topic.sentiment}">${topic.sentiment || 'neutral'} sentiment</p>
            <div class="topic-keywords">
                ${topic.keywords ? topic.keywords.slice(0, 5).map(keyword => `<span class="keyword">${keyword}</span>`).join('') : ''}
            </div>
        </div>
    `).join('');

    return `
        <section class="section">
            <h2>Topic Analysis</h2>
            <p>${topics.length} main topics were identified in the conversation:</p>
            <div class="topics-grid">
                ${topicCards}
            </div>
        </section>`;
  }

  buildInsightsSection(data) {
    const insights = data.insights || {};
    
    return `
        <section class="section">
            <h2>Key Insights</h2>
            <div class="insights-container">
                ${insights.keyEvents && insights.keyEvents.length > 0 ? `
                    <div class="insight-group">
                        <h3>Notable Events</h3>
                        <ul>
                            ${insights.keyEvents.slice(0, 5).map(event => `<li>${event}</li>`).join('')}
                        </ul>
                    </div>
                ` : ''}
                
                ${insights.relationshipDynamics ? `
                    <div class="insight-group">
                        <h3>Relationship Dynamics</h3>
                        <p>${insights.relationshipDynamics}</p>
                    </div>
                ` : ''}
                
                ${insights.conversationStyle ? `
                    <div class="insight-group">
                        <h3>Conversation Style</h3>
                        <p>${insights.conversationStyle}</p>
                    </div>
                ` : ''}
            </div>
        </section>`;
  }

  buildMetadataSection(data) {
    const metadata = data.metadata || {};
    const processingInfo = data.processingInfo || {};
    
    return `
        <section class="section">
            <h2>Analysis Metadata</h2>
            <div class="metadata-grid">
                <div class="metadata-item">
                    <strong>Analysis ID:</strong> ${metadata.analysisId || 'N/A'}
                </div>
                <div class="metadata-item">
                    <strong>Processing Method:</strong> ${metadata.method || 'N/A'}
                </div>
                <div class="metadata-item">
                    <strong>Chunks Processed:</strong> ${processingInfo.chunks || 0}
                </div>
                <div class="metadata-item">
                    <strong>Processing Time:</strong> ${processingInfo.processingTime ? Math.round(processingInfo.processingTime / 1000) : 0} seconds
                </div>
            </div>
        </section>`;
  }

  getStyles() {
    return `
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            line-height: 1.6;
            color: #333;
            background: #f8f9fa;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            text-align: center;
            background: white;
            padding: 40px 20px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            margin-bottom: 30px;
        }

        .header h1 {
            font-size: 2.5rem;
            color: #2563eb;
            margin-bottom: 10px;
        }

        .subtitle {
            color: #666;
            font-size: 1.1rem;
        }

        .main {
            display: flex;
            flex-direction: column;
            gap: 30px;
        }

        .section {
            background: white;
            padding: 30px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

        .section h2 {
            color: #1f2937;
            font-size: 1.8rem;
            margin-bottom: 20px;
            border-bottom: 2px solid #e5e7eb;
            padding-bottom: 10px;
        }

        .summary-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 20px;
        }

        .stat-card {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 8px;
            text-align: center;
            border: 1px solid #e5e7eb;
        }

        .stat-card h3 {
            color: #6b7280;
            font-size: 0.9rem;
            margin-bottom: 10px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .stat-value {
            font-size: 2rem;
            font-weight: bold;
            color: #2563eb;
        }

        .table-container {
            overflow-x: auto;
        }

        .participants-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }

        .participants-table th,
        .participants-table td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #e5e7eb;
        }

        .participants-table th {
            background: #f8f9fa;
            font-weight: 600;
            color: #374151;
        }

        .participant-name {
            font-weight: 600;
            color: #1f2937;
        }

        .sentiment-badge,
        .engagement-badge {
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 0.8rem;
            font-weight: 500;
            text-transform: capitalize;
        }

        .sentiment-positive { background: #dcfce7; color: #166534; }
        .sentiment-negative { background: #fee2e2; color: #dc2626; }
        .sentiment-neutral { background: #f3f4f6; color: #374151; }

        .engagement-high { background: #dcfce7; color: #166534; }
        .engagement-medium { background: #fef3c7; color: #d97706; }
        .engagement-low { background: #fee2e2; color: #dc2626; }

        .sentiment-container {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 30px;
        }

        .sentiment-main {
            text-align: center;
        }

        .sentiment-value {
            font-size: 2rem;
            font-weight: bold;
            margin: 10px 0;
            text-transform: capitalize;
        }

        .sentiment-score {
            color: #666;
            font-size: 1.1rem;
        }

        .sentiment-bars {
            display: flex;
            flex-direction: column;
            gap: 10px;
        }

        .sentiment-bar {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .sentiment-label {
            width: 60px;
            font-size: 0.9rem;
            color: #666;
        }

        .sentiment-bar-container {
            flex: 1;
            height: 20px;
            background: #f3f4f6;
            border-radius: 10px;
            overflow: hidden;
        }

        .sentiment-bar-fill {
            height: 100%;
            transition: width 0.3s ease;
        }

        .sentiment-bar-fill.sentiment-positive { background: #10b981; }
        .sentiment-bar-fill.sentiment-neutral { background: #6b7280; }
        .sentiment-bar-fill.sentiment-negative { background: #ef4444; }

        .sentiment-count {
            width: 40px;
            text-align: right;
            font-size: 0.9rem;
            color: #666;
        }

        .topics-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }

        .topic-card {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 8px;
            border: 1px solid #e5e7eb;
        }

        .topic-card h4 {
            color: #1f2937;
            margin-bottom: 10px;
        }

        .topic-frequency {
            color: #2563eb;
            font-weight: 600;
            margin-bottom: 5px;
        }

        .topic-sentiment {
            font-size: 0.9rem;
            margin-bottom: 10px;
            text-transform: capitalize;
        }

        .topic-keywords {
            display: flex;
            flex-wrap: wrap;
            gap: 5px;
        }

        .keyword {
            background: #2563eb;
            color: white;
            padding: 2px 6px;
            border-radius: 4px;
            font-size: 0.8rem;
        }

        .insights-container {
            display: flex;
            flex-direction: column;
            gap: 20px;
        }

        .insight-group h3 {
            color: #1f2937;
            margin-bottom: 10px;
        }

        .insight-group ul {
            list-style-type: disc;
            margin-left: 20px;
        }

        .insight-group li {
            margin-bottom: 5px;
        }

        .metadata-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 15px;
        }

        .metadata-item {
            padding: 10px;
            background: #f8f9fa;
            border-radius: 4px;
            border: 1px solid #e5e7eb;
        }

        .footer {
            text-align: center;
            padding: 20px;
            color: #666;
            font-size: 0.9rem;
            margin-top: 40px;
        }

        @media (max-width: 768px) {
            .sentiment-container {
                grid-template-columns: 1fr;
            }
            
            .header h1 {
                font-size: 2rem;
            }
        }

        @media print {
            body {
                background: white;
            }
            
            .section {
                box-shadow: none;
                border: 1px solid #e5e7eb;
            }
        }
    `;
  }

  getScripts(data) {
    return `
        // Add any interactive JavaScript here
        document.addEventListener('DOMContentLoaded', function() {
            console.log('WhatsApp Chat Analysis Report loaded');
        });
    `;
  }
}

export default HTMLGenerator;